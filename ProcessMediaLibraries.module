<?php namespace ProcessWire;

/**
 * Simple overview list of configured media libraries
 */

class ProcessMediaLibraries extends Process {
	public static function getModuleInfo() {
		return array(
			"title"			=>	"Media Library Overview",
			"summary"		=>	"Display overview of media libraries in admin",
			"version"		=>	"0.1.4",
		);
	}

	public function init() {
		$jqui = $this->modules->get("JqueryUI");
		$jqui->use('modal');
		
		parent::init();
	}

	public function execute() {
		
		$wrap = new InputfieldWrapper();
		$wrap->attr('id', "MediaLibrariesWrap");
		$wrap->addClass("WireTab");
		$wrap->label = $this->_("Media Libraries Overview");
		
		$mrk = $this->modules->get("InputfieldMarkup");
		$mrk->attr('id', 'MediaLibrariesTableMarkup');
		
		$tbl = $this->modules->get("MarkupAdminDataTable");
		$tbl->setEncodeEntities(false);
		
		$tbl->headerRow(array(
			$this->_("Media Page"),
			$this->_("Path"),
			$this->_("Images"),
			$this->_("Files"),
			$this->_("Actions")
		));
		
		$adminUrl = $this->config->urls->admin;
		foreach($this->pages->find("template=MediaLibrary, include=hidden") as $pg) {
			$tbl->row(array(
				"<a href='{$pg->editURL}'>{$pg->title}</a>",
				implode(' / ', array_map(function($item) use($adminUrl) { return "<a href='{$adminUrl}page/?open=$item->id'>$item->title</a>"; }, $pg->parents()->getArray())),
				$pg->MediaImages ? $pg->MediaImages->count() : 0,
				$pg->MediaFiles ? $pg->MediaFiles->count() : 0,
				"<a class='pw-modal pw-modal-small ml-delete fa fa-trash' data-buttons='#confirm_trash, #cancel_trash' data-autoclose='#confirm_trash' data-close='#cancel_trash' title='" . _("Delete library") . "' href='{$this->page->url}delete?id={$pg->id}&modal=1'> </a>"
			));
		}
		
		$mrk->value = $tbl->render();
		
		$wrap->append($mrk);
		
		if(! $this->templateExists()) {
			$f = $this->modules->get("InputfieldMarkup");
			$f->attr('id', 'MediaLibrariesProblemMarkup');
			$f->value = '<p>' . $this->_("MediaLibrary template missing. You may need to install/re-install the MediaLibrary module.") . '</p>';
		} else {
			$f = $this->modules->get("InputfieldButton");
			$f->attr('id+name', 'AddMediaLibrary');
			$f->attr('value', $this->_("Add Library"));
			$f->attr('href', $this->page->url . 'add');
			$f->icon = 'plus';
			$f->addClass('head_button_clone');
		}
				
		return $wrap->render() . "<div style='padding: 5px;'>" . $f->render() . "</div>";
	}
	
	
	public function executeDelete() {
		if(! $this->input->get->id) {
			return _("Missing page id parameter!");
		}
		
		$pageid = (int)$this->input->get->id;
		$page = $this->pages->get($pageid);
		
		if($page instanceof NullPage || $page->template->name != 'MediaLibrary') {
			return _("Page either does not exist or is not a media library!");
		}
		
		$title = $page->title;
		
		if(! $page->trashable(true)) {
			return _("Page cannot be trashed. Check permissions and page flags!");
		}
		
		if($this->input->get->confirm_trash) {
			if($this->pages->trash($page)) {
				$this->session->message(sprintf(_("Media library '%s' moved to trash"), $title));
				$wrap = new InputfieldWrapper();
				
				$f = $this->modules->get("InputfieldMarkup");
				$f->label = _("Success");
				$f->attr('value', sprintf(_("Media library '%s' moved to trash"), $title));
				$wrap->append($f);
				
				/*
				$btn = $this->modules->get("InputfieldButton");
				$btn->addClass('nosubmit');
				$btn->attr('id+name', 'confirm_close');
				$btn->attr('value', _("Close popup"));
				$btn->attr('data-close', '1');
				$wrap->append($btn);
				*/
				
				return	$wrap->render();
			}
		} else {
			$frm = $this->modules->get("InputfieldForm");
			$frm->attr('method', 'GET');
			$frm->attr('action', "{$this->page->url}delete");
			
			$hidden = $this->modules->get("InputfieldHidden");
			$hidden->attr('name', 'id');
			$hidden->attr('value', $pageid);
			$frm->append($hidden);
			
			$hidden = $this->modules->get("InputfieldHidden");
			$hidden->attr('name', 'modal');
			$hidden->attr('value', 1);
			$frm->append($hidden);
			
			$f = $this->modules->get("InputfieldMarkup");
			$f->attr('id+name', 'trash_msg');
			$f->label = _("Procceed?");
			$f->attr('value', sprintf(_("Really move library <strong>%s / %s</strong> into the trash bin?"), implode(' / ', $page->parents->explode('title')), $title));
			$f->description = sprintf(_("Library contains %d images and %d files"), $page->media_images, $page->media_files);
			$f->notes = _("Any files/images contained in this library will be deleted.");
			$frm->append($f);
			
			$btn = $this->modules->get("InputfieldButton");
			$btn->attr('type', 'submit');
			$btn->attr('id+name', 'confirm_trash');
			$btn->attr('value', _("Move to trash"));
			$frm->append($btn);
			
			$btn = $this->modules->get("InputfieldButton");
			$btn->attr('id+name', 'cancel_trash');
			$btn->addClass("pw-modal-cancel");
			$btn->attr('value', _("Cancel"));
			$frm->append($btn);
			
			return $frm->render();
		}

	}
	
	
	function executeAdd() {
		if(! $this->templateExists()) {
			$this->session->error($this->_("MediaLibrary template missing. You may need to install/re-install MediaLibrary module."));
			$this->session->redirect($this->page->url);
		}
		$frm = $this->modules->get("InputfieldForm");
		$frm->attr('id+name', 'AddMediaLibraryForm');
		$frm->attr('action', $this->page->url . "add");
		$frm->attr('method', "POST");
		$frm->title = $this->_("Add Media Library");
		
		$f = $this->modules->get('InputfieldPageListSelect');
		$f->attr('id+name', 'MediaLibraryParent');
		$f->title = $this->_("Parent Page");
		$f->required = true;
		$frm->append($f);
		
		$f = $this->modules->get('InputfieldText');
		if($this->languages) {
			$f->useLanguages = true;
		}
		$f->attr('id+name', 'MediaLibraryTitle');
		$f->title = $this->_("Title");
		$f->required = true;
		$frm->append($f);
		
		$f = $this->modules->get("InputfieldSubmit");
		$f->attr('id+name', 'AddMediaLibrarySubmit');
		$f->attr('value', $this->_("Save"));
		$frm->append($f);
		
		if( $this->input->post->AddMediaLibrarySubmit ) {
			$frm->processInput($this->input->post);
			
			if($frm->getErrors()) {
				$this->session->message("Errors found!");
				$out = $frm->render();
			} else {
				$pagetitle = $frm->get("MediaLibraryTitle")->value;
				//$pagename = $this->sanitizer->pageName($pagetitle, true);
				$parent = $frm->get("MediaLibraryParent")->value;
				
				$p = new Page();
				$p->template = $this->templates->get("MediaLibrary");
				//$p->name = $pagename;
				$p->title = $pagetitle;
				$p->parent = $parent;
				$p->save();

				$this->session->message($this->_("Media page {$pagetitle} created"));
				$this->session->redirect($this->page->url);
			}
		} else {
			if(! $frm->get("MediaLibraryParent")->value) {
				$frm->get("MediaLibraryParent")->set('value', $this->config->rootPageID);
			}
			
			$out = $frm->render();
		}
		
		return $out;
	}
	
	protected function templateExists() {
		if($this->templates->get("MediaLibrary")) return true;
		return false;
	}
	
	public function ___install() {
		$admin = $this->pages->get($this->config->adminRootPageID);
		$pg = $admin->child("name=media");
		if( ! $pg instanceof NullPage ) {
			throw new WireException($this->_("Already a media page present under admin, cancelling installation"));
		}
		$pg = new Page();
		$pg->template = 'admin';
		$pg->name = "media";
		$pg->parent = $admin;
		$pg->title = "Media";
		$pg->save();
		$pg->process = $this->className();
		$pg->addStatus(Page::statusLocked);
		$pg->save();
	}

	public function ___uninstall() {
		$admin = $this->pages->get($this->config->adminRootPageID);
		$pg = $admin->child("name=media");
		if(! $pg instanceof NullPage) {
			$pg->removeStatus(Page::statusLocked);
			$pg->delete();
		}
	}
	
}

