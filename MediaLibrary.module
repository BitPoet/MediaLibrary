<?php namespace ProcessWire;

/**
 * Simple Media Library module for ProcessWire
 *
 * Adds a "Media Library" tab to the pwlink dialog where you can
 * pick files from library pages. Library pages are pages using
 * the MediaLibrary template installed by this module that reside
 * under the current page or one of its parents.
 *
 * Includes preview for image files.
 *
 * written 2016 by BitPoet https://github.com/BitPoet
 * Released under Mozilla Public License v2
 *
 */

class MediaLibrary extends WireData implements Module, ConfigurableModule {
	public static function getModuleInfo() {
		return array(
			"title"			=>	"Media Library",
			"summary"		=>	"Simple Media Library module for ProcessWire",
			"version"		=>	"0.1.4",
			"autoload"		=>	true,
			"singular"		=>	true,
			"requires"		=>	array("ProcessPageEditLink", "ProcessWire>=3.0.0"),
			"installs"		=>	array("ProcessMediaLibraries"),
		);
	}

    protected static $configDefaults = array(
		"medialibraryinput"		=>	"InputfieldSelect",
		"medialibrarycollapsed"	=>	"1",
		"medialibraryhidepages"	=>	false,
		"medialibraryhidepagesadmin" => false
	);
	
	public function __construct() {
    	$this->setArray(self::$configDefaults);
	}
	
	public function init() {
		$info = self::getModuleInfo();
		$this->addHookAfter("ProcessPageEditLink::execute", $this, "appendLibraryPicker");
		$this->addHookAfter("ProcessPageEditImageSelect::execute", $this, "appendImageLibraryPicker");
		// It's currently not possible to add custom execute methods through hooks,
		// so we do the processing in a before hook to the regular execute method
		//$this->addHook("ProcessPageEditLink::executeMedia", $this, "getMediaList");
		$this->addHookBefore("ProcessPageEditLink::execute", $this, "getMediaList");
		// Hide library pages from the tree if enabled in module config
		$this->addHookAfter('ProcessPageList::execute', $this, 'hideLibraryPages');
		
		$baseurl = $this->config->urls->{$this->className()};
		$basepath = $this->config->paths->{$this->className()};
		$versionts = str_replace('.', '', $info["version"]) . "-" . filemtime($basepath . "MediaLibrary.js");
		$this->config->scripts->add($baseurl . "MediaLibrary.js?v=" . $versionts);
		
		$this->config->js('MediaLibrary', [
			'statusMsg' => $this->_('Showing ##showing## of ##count## images')
		]);
	}
	
	public function hideLibraryPages(HookEvent $event) {
		if(! $this->config->ajax) return;
		if($this->user->isSuperuser() && ! $this->medialibraryhidepagesadmin) return;
		if(!$this->medialibraryhidepages) return;
		
		$modified = false;

		$json = json_decode($event->return, true);
		
		foreach($json["children"] as $key => $child) {
			$c = $this->pages->get($child['id']);
			if($c->template->name == "MediaLibrary") {
				unset($json['children'][$key]);
				$modified = true;
			}
		}
		
		// Return early if nothing was changed
		if(! $modified) return;
		
		$json['children'] = array_values($json['children']);
		$event->return = json_encode($json);
	}
	
	public function ___getPageMediaLibraries($pg) {
		$libraries = array();
		foreach($pg->parents->and($pg) as $ppage) {
			$libraries = array_merge($libraries, $this->getChildLibraries($ppage));
		}
		return $libraries;
	}
	
	private function getChildLibraries($pg) {
		$libs = array();
		foreach($pg->children("template=MediaLibrary, include=hidden") as $cmedia) {
			$libs[] = $cmedia;
			$libs = array_merge($libs, $this->getChildLibraries($cmedia));
		}
		return $libs;
	}
	
	public function getMediaList($event) {
		if( ! $this->input->get("mediafiles") ) return;

		$files = array();

		$obj = $event->object;
		
		if( ! $this->input->get("mediapageid") ) return wireEncodeJSON($files);
		
		$mpage = $this->pages->get($this->input->get("mediapageid"));
		if( $mpage instanceof NullPage ) return wireEncodeJSON($files);
		
		foreach( $mpage->fields as $f ) {
			if(!$f->type instanceof FieldtypeFile) continue;
			foreach($mpage->get($f->name) as $file) {
				$files[] = array($file->url, $f->getLabel() . ': ' . $file->basename, ($f->type instanceof FieldtypeImage) ? 1 : 0); 
			}
		}
		
		$event->return = json_encode($files);
		$event->replace = true;
	}
	
	public function appendLibraryPicker($event) {
		$obj = $event->object;
		$page = $obj->page;
		if($page->template->name == 'admin' && $this->input->get->id) {
			$page = $this->pages->get($this->input->get->id);
		}
		$rendered = $event->return;
		
		$libraries = $this->getPageMediaLibraries($page);
		
		$wr = new InputfieldWrapper();
		$wr->attr("title", $this->_("Media Files"));
		$wr->attr("id", "mediafiles");
		$wr->addClass("WireTab");
		$wr->collapsed = $this->medialibrarycollapsed ? Inputfield::collapsedYes : Inputfield::collapsedNo;
		
		$inpclass = $this->medialibraryinput;
		if(! $inpclass ) $inpclass = "InputfieldSelect";
		
		$f = $this->modules->get($inpclass);
		$f->attr("id+name", "mediafilelibrary");
		$f->label = $this->_("Select library");
		$f->description = $this->_("Select a library to display a list of files and images to pick from.");
		foreach($libraries as $lib) {
			$f->addOption($lib->id, $lib->title);
		}
		$wr->add($f);
		
		$f = $this->modules->get("InputfieldSelect");
		$f->attr("id+name", "mediafiletarget");
		$f->label = $this->_("Select file");
		$f->description = $this->_("Pick a file or image from the selected library.");
		$f->columnWidth = 75;
		$wr->add($f);
		
		$f = $this->modules->get("InputfieldMarkup");
		$f->attr('id', "MediaLibraryPreviewWrap");
		$f->label = $this->_("Preview");
		$f->attr('value', "<img id='MediaLibraryPreview' style='height: 100px;' />");
		$f->columnWidth = 25;
		$wr->add($f);
		
		$html = "\n<li class='Inputfield InputfieldWrapper  WireTab' id='link_media' title='" . $this->_("Media Library") . "'>"
				. $wr->render()
				. "</li>\n"
		;
		
		$event->return = preg_replace('~^(.*)(</ul>)~sm', '$1' . $html . '$2', $rendered);
	}
	
	public function appendImageLibraryPicker($event) {
		$obj = $event->object;
		$editID = (int) $this->wire('session')->get($obj, 'edit_page_id');
		if($editID) {
			$page = $this->wire('pages')->get($editID);
		} else {
			$page = $obj->page;
			if($page->template->name == 'admin' && $this->input->get->id) {
				$page = $this->pages->get($this->input->get->id);
			}
		}
		$rendered = $event->return;
		
		$libraries = $this->getPageMediaLibraries($page);

		$inpclass = $this->medialibraryinput;
		if(! $inpclass ) $inpclass = "InputfieldSelect";

		$f = $this->modules->get($inpclass);
		$f->attr("id+name", "mediaimageslibrary");
		$f->label = $this->_("Select a library");
		$f->description = $this->_("Select a media library to pick from.");
		foreach($libraries as $lib) {
			$f->addOption($lib->id, $lib->title);
		}
		
		$expandIcon = "<i class='toggle-icon fa fa-angle-down' data-to='fa-angle-right fa-angle-down'></i>";
		
		$collapsedClasses = $this->medialibrarycollapsed ? "InputfieldStateCollapsed collapsed1" : "";
		
		$html = "\n<li class='Inputfield $collapsedClasses Inputfield_mediaimageslibrary InputfieldColumnWidthFirst' id='wrap_media_image' title='" . $this->_("Media Library") . "'>"
				. "<label for='mediaimageslibrary' class='InputfieldHeader InputfieldStateToggle'>" . $this->_("Media Library") . " $expandIcon</label>\n"
				. "<div class='InputfieldContent'>\n"
				. "<p class='description'>" . $this->_("Pick a media library to quickly select an image from its page") . "</p>\n"
				. $f->render()
				. "</div>"
				. "</li>\n"
		;
		
		$collapseIcon = "<i class='toggle-icon fa fa-angle-right' data-to='fa-angle-down fa-angle-right'></i>";
		$input = $this->modules->get('InputfieldText');
		$input->attr('id', 'mediaimagesfilter');
		$input->label = $this->_("Filter images");
		$input->attr('size', 20);
		$input->collapsed = 1;
		$html .= "\n<li class='Inputfield Inputfield_mediaimagesfilter InputfieldColumnWidthFirst' id='wrap_media_filter' title='" . $this->_("Filter Images") . "'>"
				. "<label for='mediaimagesfilter' class='InputfieldHeader InputfieldStateToggle'>" . $this->_("Filter Images") . " $collapseIcon</label>\n"
				. "<div class='InputfieldContent'>\n"
				. "<p class='description'>" . $this->_("Start typing to filter images by name") . "</p>\n"
				. $input->render()
				. " <span id='mediaimagesfilterstatus'></span>"
				. "</div>"
				. "</li>\n"
		;

		$event->return = preg_replace("~(<li[^>]+id='wrap_page_id')~sm", $html . '$1', $rendered);
	}
	
	public function ___install() {
		$fg = $this->fieldgroups->get("MediaLibrary");
		if( !$fg ) {
			$fg = new Fieldgroup();
			$fg->name = "MediaLibrary";
			$fg->add($this->fields->get("title"));
			$fg->save();
		}
		
		$tpl = $this->templates->get("MediaLibrary");
		if( !$tpl ) {
			$tpl = new Template();
			$tpl->name = "MediaLibrary";
			$tpl->fieldgroup = $fg;
			$tpl->noChildren = 1;
			$tpl->noAppendTemplateFile = 1;
			$tpl->noPrependTemplateFile = 1;
			$tpl->tags = "MediaLibrary";
			$tpl->save();
			$tpl->noChildren = 0;
			$tpl->childTemplates = array($tpl->id);
			$tpl->save();
		}
		
		$f = $this->fields->get("MediaImages");
		if( !$f ) {
			$f = new Field();
			$f->type = $this->modules->get("FieldtypeImage");
			$f->name = "MediaImages";
			$f->title = $this->_("MediaImages");
			$f->outputFormat = FieldtypeFile::outputFormatArray;
			$f->inputfieldClass = "InputfieldImage";
			$f->extensions = "bmp jpg png gif jpeg";
			$f->adminThumbs = true;
			$f->defaultGrid = true;
			$f->save();
		}
		if( !$fg->has($f) ) {
			$fg->add($f);
			$fg->save();
		}
		
		$f = $this->fields->get("MediaFiles");
		if( !$f ) {
			$f = new Field();
			$f->type = $this->modules->get("FieldtypeFile");
			$f->name = "MediaFiles";
			$f->title = $this->_("MediaFiles");
			$f->outputFormat = FieldtypeFile::outputFormatArray;
			$f->inputfieldClass = "InputfieldFile";
			$f->extensions = "pdf doc docx xls xlsx ppt pptx bmp png jpg gif txt rtf zip";
			$f->save();
		}
		if( !$fg->has($f) ) {
			$fg->add($f);
			$fg->save();
		}
	}
	
	public function ___uninstall() {
		$deleteTemplate = true;
		$deleteFields = true;
		
		$fldcnt = $this->pages->count("MediaFiles!='', include=all") + $this->pages->count("MediaImages!='', include=all");
		if( $fldcnt > 0 ) {
			$this->warning($this->_("Media files/images present, not deleting fields"));
			$deleteFields = false;
		}
		
		$tplcnt = $this->pages->count("template=MediaLibrary, include=all");
		if( $tplcnt > 0 ) {
			$this->warning($this->_("Pages with MediaLibrary template present, not deleting template"));
			$deleteTemplate = false;
		}

		if( $deleteTemplate ) {
			$tpl = $this->templates->get("MediaLibrary");
			$this->templates->delete($tpl);
			$fg = $this->fieldgroups->get("MediaLibrary");
			$this->fieldgroups->delete($fg);
			$this->message($this->_("Deleted template MediaLibrary"));
		}
		
		if( $deleteFields ) {
			$f = $this->fields->get("MediaImages");
			$this->fields->delete($f);
			$f = $this->fields->get("MediaFiles");
			$this->fields->delete($f);
			$this->message($this->_("Deleted fields for MediaLibrary"));
		}
	}

	public function ___upgrade($from, $to) {
		if(version_compare($from, "0.0.7", "<")) {
			$tpl = $this->templates->get("MediaLibrary");
			if($tpl) {
				$tpl->noChildren = 0;
				$tpl->childTemplates = array($tpl->id);
				$tpl->save();
			}
		}
	}

	public static function getModuleConfigInputfields(array $data) {
		$data = array_merge(self::$configDefaults, $data);

		$wrap = new InputfieldWrapper();
		
		$f = wire('modules')->get("InputfieldSelect");
		$f->attr("id+name", "medialibraryinput");
		$f->label = wire()->_("Input for Library Chooser");
		$f->description = wire()->_("Select which input should be used to let the user pick from selectable libraries.");
		$f->addOption("InputfieldSelect", "Select (Dropdown)");
		$f->addOption("InputfieldRadios", "Radios");
		$f->attr('value', $data["medialibraryinput"]);
		$wrap->add($f);
		
		$f = wire('modules')->get("InputfieldRadios");
		$f->attr("id+name", "medialibrarycollapsed");
		$f->label = wire()->_("Library field collapsed");
		$f->description = wire()->_("Show the library selection in the image editor collapsed by default.");
		$f->addOption("1", wire()->_("Yes (default)"));
		$f->addOption("0", wire()->_("No (show expanded)"));
		$f->attr('value', $data["medialibrarycollapsed"]);
		$wrap->add($f);
		
		$f = wire('modules')->get("InputfieldCheckbox");
		$f->attr('name', 'medialibraryhidepages');
		$f->label = wire()->_("Hide library pages");
		$f->description = wire()->_("Hide library pages from the page tree for non-superusers");
		if(isset($data["medialibraryhidepages"]) && $data["medialibraryhidepages"]) $f->attr('checked', 'checked');
		$wrap->add($f);
		
		$f = wire('modules')->get("InputfieldCheckbox");
		$f->attr('name', 'medialibraryhidepagesadmin');
		$f->label = wire()->_("Hide for superusers too");
		$f->description = wire()->_("Hide library pages from the page tree for superusers too if above option is checked");
		if(isset($data["medialibraryhidepagesadmin"]) && $data["medialibraryhidepagesadmin"]) $f->attr('checked', 'checked');
		$wrap->add($f);

		return $wrap;
	}
}

